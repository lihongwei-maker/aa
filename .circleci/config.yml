install_official_git_client: &install_official_git_client
  name: Install Official Git Client
  no_output_timeout: "1h"
  command: |
    set -e
    sudo apt-get -qq update
    sudo apt-get -qq install openssh-client git

pytorch_tutorial_build_defaults: &pytorch_tutorial_build_defaults
  environment:
    DOCKER_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/pytorch/pytorch-linux-xenial-cuda8-cudnn6-py3"
    CUDA_VERSION: "8"
  resource_class: gpu.medium
  machine:
    image: default
  steps:
  - run:
      <<: *install_official_git_client
  - checkout
  - run:
      name: Set Up CI Environment
      no_output_timeout: "1h"
      command: |
        set -e

        curl -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
        echo "deb https://nvidia.github.io/libnvidia-container/ubuntu14.04/amd64 /" | sudo tee -a /etc/apt/sources.list.d/nvidia-docker.list
        echo "deb https://nvidia.github.io/nvidia-container-runtime/ubuntu14.04/amd64 /" | sudo tee -a /etc/apt/sources.list.d/nvidia-docker.list
        echo "deb https://nvidia.github.io/nvidia-docker/ubuntu14.04/amd64 /" | sudo tee -a /etc/apt/sources.list.d/nvidia-docker.list

        sudo apt-get -qq update
        sudo apt-get -qq remove linux-image-generic linux-headers-generic linux-generic
        sudo apt-get -qq install \
          linux-headers-$(uname -r) \
          linux-image-generic \
          moreutils \
          nvidia-docker2 \
          expect-dev

        sudo pkill -SIGHUP dockerd

        sudo pip -q install awscli==1.16.35

        if [ -n "${CUDA_VERSION}" ]; then
          wget 'https://s3.amazonaws.com/ossci-linux/nvidia_driver/NVIDIA-Linux-x86_64-396.26.run'
          sudo /bin/bash ./NVIDIA-Linux-x86_64-396.26.run -s --no-drm
          nvidia-smi
        fi

        # This IAM user only allows read-write access to ECR
        export AWS_ACCESS_KEY_ID=${CIRCLECI_AWS_ACCESS_KEY_FOR_ECR_READ_ONLY}
        export AWS_SECRET_ACCESS_KEY=${CIRCLECI_AWS_SECRET_KEY_FOR_ECR_READ_ONLY}
        eval $(aws ecr get-login --region us-east-1 --no-include-email)
  - run:
      name: Build
      no_output_timeout: "20h"
      command: |
        set -e

        # Get latest PyTorch docker image version
        curl -O https://raw.githubusercontent.com/pytorch/pytorch/master/.circleci/config.yml
        while read line; do
          if [[ "$line" == *PyTorchDockerVersion* ]]; then
            export pyTorchDockerImageTag=${line:23}  # len("# PyTorchDockerVersion:") == 23
            echo "PyTorchDockerImageTag: "${pyTorchDockerImageTag}
            break
          fi
        done < config.yml

        cat >/home/circleci/project/ci_build_script.sh <<EOL
        # =================== The following code will be executed inside Docker container ===================
        set -ex

        pip install awscli==1.16.35
        pip install torch_nightly -f https://download.pytorch.org/whl/nightly/cu80/torch_nightly.html

        .jenkins/build.sh

        # yf225 TODO: decide whether to push to gh-pages based on $COMMIT_SOURCE

        # =================== The above code will be executed inside Docker container ===================
        EOL
        chmod +x /home/circleci/project/ci_build_script.sh

        export DOCKER_IMAGE=${DOCKER_IMAGE}:${pyTorchDockerImageTag}
        echo "DOCKER_IMAGE: "${DOCKER_IMAGE}
        docker pull ${DOCKER_IMAGE} >/dev/null
        if [ -n "${CUDA_VERSION}" ]; then
          export id=$(docker run --runtime=nvidia -t -d -w /var/lib/jenkins ${DOCKER_IMAGE})
        else
          export id=$(docker run -t -d -w /var/lib/jenkins ${DOCKER_IMAGE})
        fi

        echo "declare -x JOB_BASE_NAME=${CIRCLE_JOB}" > /home/circleci/project/env
        echo "declare -x COMMIT_ID=${CIRCLE_SHA1}" >> /home/circleci/project/env
        echo "declare -x COMMIT_SOURCE=${CIRCLE_BRANCH}" >> /home/circleci/project/env

        docker cp /home/circleci/project/. "$id:/var/lib/jenkins/workspace"

        export COMMAND='((echo "source ./workspace/env" && echo "sudo chown -R jenkins workspace && cd workspace && ./ci_build_script.sh") | docker exec -u jenkins -i "$id" bash) 2>&1'
        echo ${COMMAND} > ./command.sh && unbuffer bash ./command.sh | ts

version: 2
jobs:
  pytorch_tutorial_build:
    <<: *pytorch_tutorial_build_defaults

workflows:
  version: 2
  build:
    jobs:
      - pytorch_tutorial_build:
          context: org-member
