
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/transfer_learning_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_transfer_learning_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_transfer_learning_tutorial.py:


Transfer Learning for Computer Vision Tutorial
==============================================
**Author**: `Sasank Chilamkurthy <https://chsasank.github.io>`_

In this tutorial, you will learn how to train a convolutional neural network for
image classification using transfer learning. You can read more about the transfer
learning at `cs231n notes <https://cs231n.github.io/transfer-learning/>`__

Quoting these notes,

    In practice, very few people train an entire Convolutional Network
    from scratch (with random initialization), because it is relatively
    rare to have a dataset of sufficient size. Instead, it is common to
    pretrain a ConvNet on a very large dataset (e.g. ImageNet, which
    contains 1.2 million images with 1000 categories), and then use the
    ConvNet either as an initialization or a fixed feature extractor for
    the task of interest.

These two major transfer learning scenarios look as follows:

-  **Finetuning the ConvNet**: Instead of random initialization, we
   initialize the network with a pretrained network, like the one that is
   trained on imagenet 1000 dataset. Rest of the training looks as
   usual.
-  **ConvNet as fixed feature extractor**: Here, we will freeze the weights
   for all of the network except that of the final fully connected
   layer. This last fully connected layer is replaced with a new one
   with random weights and only this layer is trained.

.. GENERATED FROM PYTHON SOURCE LINES 33-53

.. code-block:: default

    # License: BSD
    # Author: Sasank Chilamkurthy

    import torch
    import torch.nn as nn
    import torch.optim as optim
    from torch.optim import lr_scheduler
    import torch.backends.cudnn as cudnn
    import numpy as np
    import torchvision
    from torchvision import datasets, models, transforms
    import matplotlib.pyplot as plt
    import time
    import os
    from PIL import Image
    from tempfile import TemporaryDirectory

    cudnn.benchmark = True
    plt.ion()   # interactive mode





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <contextlib.ExitStack object at 0x7f523c230f10>



.. GENERATED FROM PYTHON SOURCE LINES 54-73

Load Data
---------

We will use torchvision and torch.utils.data packages for loading the
data.

The problem we're going to solve today is to train a model to classify
**ants** and **bees**. We have about 120 training images each for ants and bees.
There are 75 validation images for each class. Usually, this is a very
small dataset to generalize upon, if trained from scratch. Since we
are using transfer learning, we should be able to generalize reasonably
well.

This dataset is a very small subset of imagenet.

.. Note ::
   Download the data from
   `here <https://download.pytorch.org/tutorial/hymenoptera_data.zip>`_
   and extract it to the current directory.

.. GENERATED FROM PYTHON SOURCE LINES 73-103

.. code-block:: default


    # Data augmentation and normalization for training
    # Just normalization for validation
    data_transforms = {
        'train': transforms.Compose([
            transforms.RandomResizedCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'val': transforms.Compose([
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
    }

    data_dir = 'data/hymenoptera_data'
    image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                              data_transforms[x])
                      for x in ['train', 'val']}
    dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,
                                                 shuffle=True, num_workers=4)
                  for x in ['train', 'val']}
    dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}
    class_names = image_datasets['train'].classes

    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")








.. GENERATED FROM PYTHON SOURCE LINES 104-108

Visualize a few images
^^^^^^^^^^^^^^^^^^^^^^
Let's visualize a few training images so as to understand the data
augmentations.

.. GENERATED FROM PYTHON SOURCE LINES 108-131

.. code-block:: default


    def imshow(inp, title=None):
        """Display image for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        inp = np.clip(inp, 0, 1)
        plt.imshow(inp)
        if title is not None:
            plt.title(title)
        plt.pause(0.001)  # pause a bit so that plots are updated


    # Get a batch of training data
    inputs, classes = next(iter(dataloaders['train']))

    # Make a grid from batch
    out = torchvision.utils.make_grid(inputs)

    imshow(out, title=[class_names[x] for x in classes])





.. image-sg:: /beginner/images/sphx_glr_transfer_learning_tutorial_001.png
   :alt: ['ants', 'ants', 'ants', 'ants']
   :srcset: /beginner/images/sphx_glr_transfer_learning_tutorial_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 132-143

Training the model
------------------

Now, let's write a general function to train a model. Here, we will
illustrate:

-  Scheduling the learning rate
-  Saving the best model

In the following, parameter ``scheduler`` is an LR scheduler object from
``torch.optim.lr_scheduler``.

.. GENERATED FROM PYTHON SOURCE LINES 143-216

.. code-block:: default



    def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
        since = time.time()

        # Create a temporary directory to save training checkpoints
        with TemporaryDirectory() as tempdir:
            best_model_params_path = os.path.join(tempdir, 'best_model_params.pt')
    
            torch.save(model.state_dict(), best_model_params_path)
            best_acc = 0.0

            for epoch in range(num_epochs):
                print(f'Epoch {epoch}/{num_epochs - 1}')
                print('-' * 10)

                # Each epoch has a training and validation phase
                for phase in ['train', 'val']:
                    if phase == 'train':
                        model.train()  # Set model to training mode
                    else:
                        model.eval()   # Set model to evaluate mode

                    running_loss = 0.0
                    running_corrects = 0

                    # Iterate over data.
                    for inputs, labels in dataloaders[phase]:
                        inputs = inputs.to(device)
                        labels = labels.to(device)

                        # zero the parameter gradients
                        optimizer.zero_grad()

                        # forward
                        # track history if only in train
                        with torch.set_grad_enabled(phase == 'train'):
                            outputs = model(inputs)
                            _, preds = torch.max(outputs, 1)
                            loss = criterion(outputs, labels)

                            # backward + optimize only if in training phase
                            if phase == 'train':
                                loss.backward()
                                optimizer.step()

                        # statistics
                        running_loss += loss.item() * inputs.size(0)
                        running_corrects += torch.sum(preds == labels.data)
                    if phase == 'train':
                        scheduler.step()

                    epoch_loss = running_loss / dataset_sizes[phase]
                    epoch_acc = running_corrects.double() / dataset_sizes[phase]

                    print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')

                    # deep copy the model
                    if phase == 'val' and epoch_acc > best_acc:
                        best_acc = epoch_acc
                        torch.save(model.state_dict(), best_model_params_path)

                print()

            time_elapsed = time.time() - since
            print(f'Training complete in {time_elapsed // 60:.0f}m {time_elapsed % 60:.0f}s')
            print(f'Best val Acc: {best_acc:4f}')

            # load best model weights
            model.load_state_dict(torch.load(best_model_params_path))
        return model









.. GENERATED FROM PYTHON SOURCE LINES 217-222

Visualizing the model predictions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generic function to display predictions for a few images


.. GENERATED FROM PYTHON SOURCE LINES 222-249

.. code-block:: default


    def visualize_model(model, num_images=6):
        was_training = model.training
        model.eval()
        images_so_far = 0
        fig = plt.figure()

        with torch.no_grad():
            for i, (inputs, labels) in enumerate(dataloaders['val']):
                inputs = inputs.to(device)
                labels = labels.to(device)

                outputs = model(inputs)
                _, preds = torch.max(outputs, 1)

                for j in range(inputs.size()[0]):
                    images_so_far += 1
                    ax = plt.subplot(num_images//2, 2, images_so_far)
                    ax.axis('off')
                    ax.set_title(f'predicted: {class_names[preds[j]]}')
                    imshow(inputs.cpu().data[j])

                    if images_so_far == num_images:
                        model.train(mode=was_training)
                        return
            model.train(mode=was_training)








.. GENERATED FROM PYTHON SOURCE LINES 250-255

Finetuning the ConvNet
----------------------

Load a pretrained model and reset final fully connected layer.


.. GENERATED FROM PYTHON SOURCE LINES 255-272

.. code-block:: default


    model_ft = models.resnet18(weights='IMAGENET1K_V1')
    num_ftrs = model_ft.fc.in_features
    # Here the size of each output sample is set to 2.
    # Alternatively, it can be generalized to ``nn.Linear(num_ftrs, len(class_names))``.
    model_ft.fc = nn.Linear(num_ftrs, 2)

    model_ft = model_ft.to(device)

    criterion = nn.CrossEntropyLoss()

    # Observe that all parameters are being optimized
    optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /var/lib/jenkins/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth

      0%|          | 0.00/44.7M [00:00<?, ?B/s]
     26%|##5       | 11.4M/44.7M [00:00<00:00, 119MB/s]
     53%|#####3    | 23.8M/44.7M [00:00<00:00, 126MB/s]
     83%|########2 | 36.9M/44.7M [00:00<00:00, 131MB/s]
    100%|##########| 44.7M/44.7M [00:00<00:00, 130MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 273-279

Train and evaluate
^^^^^^^^^^^^^^^^^^

It should take around 15-25 min on CPU. On GPU though, it takes less than a
minute.


.. GENERATED FROM PYTHON SOURCE LINES 279-283

.. code-block:: default


    model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,
                           num_epochs=25)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch 0/24
    ----------
    train Loss: 0.4779 Acc: 0.7582
    val Loss: 0.2902 Acc: 0.8758

    Epoch 1/24
    ----------
    train Loss: 0.5444 Acc: 0.8074
    val Loss: 0.5925 Acc: 0.7712

    Epoch 2/24
    ----------
    train Loss: 0.4516 Acc: 0.7992
    val Loss: 0.2736 Acc: 0.9020

    Epoch 3/24
    ----------
    train Loss: 0.6248 Acc: 0.7500
    val Loss: 0.3900 Acc: 0.8497

    Epoch 4/24
    ----------
    train Loss: 0.4075 Acc: 0.8566
    val Loss: 0.3189 Acc: 0.8889

    Epoch 5/24
    ----------
    train Loss: 0.4997 Acc: 0.7910
    val Loss: 0.3192 Acc: 0.8954

    Epoch 6/24
    ----------
    train Loss: 0.4015 Acc: 0.8320
    val Loss: 0.2361 Acc: 0.9085

    Epoch 7/24
    ----------
    train Loss: 0.3701 Acc: 0.8197
    val Loss: 0.1965 Acc: 0.9281

    Epoch 8/24
    ----------
    train Loss: 0.2329 Acc: 0.9303
    val Loss: 0.1945 Acc: 0.9216

    Epoch 9/24
    ----------
    train Loss: 0.2627 Acc: 0.8893
    val Loss: 0.2337 Acc: 0.9346

    Epoch 10/24
    ----------
    train Loss: 0.3423 Acc: 0.8689
    val Loss: 0.1643 Acc: 0.9346

    Epoch 11/24
    ----------
    train Loss: 0.3266 Acc: 0.8566
    val Loss: 0.2213 Acc: 0.9216

    Epoch 12/24
    ----------
    train Loss: 0.2474 Acc: 0.8770
    val Loss: 0.2134 Acc: 0.9281

    Epoch 13/24
    ----------
    train Loss: 0.3010 Acc: 0.8852
    val Loss: 0.1877 Acc: 0.9281

    Epoch 14/24
    ----------
    train Loss: 0.2863 Acc: 0.8566
    val Loss: 0.2310 Acc: 0.9281

    Epoch 15/24
    ----------
    train Loss: 0.3254 Acc: 0.8566
    val Loss: 0.2929 Acc: 0.9150

    Epoch 16/24
    ----------
    train Loss: 0.2110 Acc: 0.9016
    val Loss: 0.2069 Acc: 0.9281

    Epoch 17/24
    ----------
    train Loss: 0.2660 Acc: 0.9180
    val Loss: 0.1842 Acc: 0.9216

    Epoch 18/24
    ----------
    train Loss: 0.2682 Acc: 0.8730
    val Loss: 0.2245 Acc: 0.9281

    Epoch 19/24
    ----------
    train Loss: 0.2065 Acc: 0.9139
    val Loss: 0.1897 Acc: 0.9281

    Epoch 20/24
    ----------
    train Loss: 0.2571 Acc: 0.8770
    val Loss: 0.1973 Acc: 0.9346

    Epoch 21/24
    ----------
    train Loss: 0.2565 Acc: 0.8852
    val Loss: 0.2465 Acc: 0.9216

    Epoch 22/24
    ----------
    train Loss: 0.3191 Acc: 0.8934
    val Loss: 0.2000 Acc: 0.9150

    Epoch 23/24
    ----------
    train Loss: 0.2753 Acc: 0.8648
    val Loss: 0.1981 Acc: 0.9216

    Epoch 24/24
    ----------
    train Loss: 0.3043 Acc: 0.8689
    val Loss: 0.1984 Acc: 0.9216

    Training complete in 1m 4s
    Best val Acc: 0.934641




.. GENERATED FROM PYTHON SOURCE LINES 285-289

.. code-block:: default


    visualize_model(model_ft)





.. image-sg:: /beginner/images/sphx_glr_transfer_learning_tutorial_002.png
   :alt: predicted: ants, predicted: bees, predicted: ants, predicted: bees, predicted: bees, predicted: ants
   :srcset: /beginner/images/sphx_glr_transfer_learning_tutorial_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 290-300

ConvNet as fixed feature extractor
----------------------------------

Here, we need to freeze all the network except the final layer. We need
to set ``requires_grad = False`` to freeze the parameters so that the
gradients are not computed in ``backward()``.

You can read more about this in the documentation
`here <https://pytorch.org/docs/notes/autograd.html#excluding-subgraphs-from-backward>`__.


.. GENERATED FROM PYTHON SOURCE LINES 300-321

.. code-block:: default


    model_conv = torchvision.models.resnet18(weights='IMAGENET1K_V1')
    for param in model_conv.parameters():
        param.requires_grad = False

    # Parameters of newly constructed modules have requires_grad=True by default
    num_ftrs = model_conv.fc.in_features
    model_conv.fc = nn.Linear(num_ftrs, 2)

    model_conv = model_conv.to(device)

    criterion = nn.CrossEntropyLoss()

    # Observe that only parameters of final layer are being optimized as
    # opposed to before.
    optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)









.. GENERATED FROM PYTHON SOURCE LINES 322-329

Train and evaluate
^^^^^^^^^^^^^^^^^^

On CPU this will take about half the time compared to previous scenario.
This is expected as gradients don't need to be computed for most of the
network. However, forward does need to be computed.


.. GENERATED FROM PYTHON SOURCE LINES 329-333

.. code-block:: default


    model_conv = train_model(model_conv, criterion, optimizer_conv,
                             exp_lr_scheduler, num_epochs=25)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch 0/24
    ----------
    train Loss: 0.6996 Acc: 0.6516
    val Loss: 0.2014 Acc: 0.9346

    Epoch 1/24
    ----------
    train Loss: 0.4233 Acc: 0.8033
    val Loss: 0.2656 Acc: 0.8758

    Epoch 2/24
    ----------
    train Loss: 0.4603 Acc: 0.7869
    val Loss: 0.1847 Acc: 0.9477

    Epoch 3/24
    ----------
    train Loss: 0.3096 Acc: 0.8566
    val Loss: 0.1747 Acc: 0.9477

    Epoch 4/24
    ----------
    train Loss: 0.4427 Acc: 0.8156
    val Loss: 0.1630 Acc: 0.9477

    Epoch 5/24
    ----------
    train Loss: 0.5505 Acc: 0.7828
    val Loss: 0.1643 Acc: 0.9477

    Epoch 6/24
    ----------
    train Loss: 0.3004 Acc: 0.8607
    val Loss: 0.1744 Acc: 0.9542

    Epoch 7/24
    ----------
    train Loss: 0.4083 Acc: 0.8361
    val Loss: 0.1892 Acc: 0.9412

    Epoch 8/24
    ----------
    train Loss: 0.4483 Acc: 0.7910
    val Loss: 0.1984 Acc: 0.9477

    Epoch 9/24
    ----------
    train Loss: 0.3335 Acc: 0.8279
    val Loss: 0.1942 Acc: 0.9412

    Epoch 10/24
    ----------
    train Loss: 0.2413 Acc: 0.8934
    val Loss: 0.2001 Acc: 0.9477

    Epoch 11/24
    ----------
    train Loss: 0.3107 Acc: 0.8689
    val Loss: 0.1801 Acc: 0.9412

    Epoch 12/24
    ----------
    train Loss: 0.3032 Acc: 0.8689
    val Loss: 0.1669 Acc: 0.9477

    Epoch 13/24
    ----------
    train Loss: 0.3587 Acc: 0.8525
    val Loss: 0.1900 Acc: 0.9477

    Epoch 14/24
    ----------
    train Loss: 0.2771 Acc: 0.8893
    val Loss: 0.2317 Acc: 0.9216

    Epoch 15/24
    ----------
    train Loss: 0.3064 Acc: 0.8852
    val Loss: 0.1909 Acc: 0.9477

    Epoch 16/24
    ----------
    train Loss: 0.4243 Acc: 0.8238
    val Loss: 0.2227 Acc: 0.9346

    Epoch 17/24
    ----------
    train Loss: 0.3297 Acc: 0.8238
    val Loss: 0.1916 Acc: 0.9412

    Epoch 18/24
    ----------
    train Loss: 0.4235 Acc: 0.8238
    val Loss: 0.1766 Acc: 0.9477

    Epoch 19/24
    ----------
    train Loss: 0.2500 Acc: 0.8934
    val Loss: 0.2003 Acc: 0.9477

    Epoch 20/24
    ----------
    train Loss: 0.2413 Acc: 0.8934
    val Loss: 0.1821 Acc: 0.9477

    Epoch 21/24
    ----------
    train Loss: 0.3762 Acc: 0.8115
    val Loss: 0.1842 Acc: 0.9412

    Epoch 22/24
    ----------
    train Loss: 0.3485 Acc: 0.8566
    val Loss: 0.2166 Acc: 0.9281

    Epoch 23/24
    ----------
    train Loss: 0.3625 Acc: 0.8361
    val Loss: 0.1747 Acc: 0.9412

    Epoch 24/24
    ----------
    train Loss: 0.3840 Acc: 0.8320
    val Loss: 0.1768 Acc: 0.9412

    Training complete in 0m 32s
    Best val Acc: 0.954248




.. GENERATED FROM PYTHON SOURCE LINES 335-342

.. code-block:: default


    visualize_model(model_conv)

    plt.ioff()
    plt.show()





.. image-sg:: /beginner/images/sphx_glr_transfer_learning_tutorial_003.png
   :alt: predicted: bees, predicted: ants, predicted: bees, predicted: bees, predicted: ants, predicted: ants
   :srcset: /beginner/images/sphx_glr_transfer_learning_tutorial_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 343-349

Inference on custom images
--------------------------

Use the trained model to make predictions on custom images and visualize
the predicted class labels along with the images.


.. GENERATED FROM PYTHON SOURCE LINES 349-370

.. code-block:: default


    def visualize_model_predictions(model,img_path):
        was_training = model.training
        model.eval()

        img = Image.open(img_path)
        img = data_transforms['val'](img)
        img = img.unsqueeze(0)
        img = img.to(device)

        with torch.no_grad():
            outputs = model(img)
            _, preds = torch.max(outputs, 1)

            ax = plt.subplot(2,2,1)
            ax.axis('off')
            ax.set_title(f'Predicted: {class_names[preds[0]]}')
            imshow(img.cpu().data[0])
        
            model.train(mode=was_training)








.. GENERATED FROM PYTHON SOURCE LINES 372-382

.. code-block:: default


    visualize_model_predictions(
        model_conv,
        img_path='data/hymenoptera_data/val/bees/72100438_73de9f17af.jpg'
    )

    plt.ioff()
    plt.show()





.. image-sg:: /beginner/images/sphx_glr_transfer_learning_tutorial_004.png
   :alt: Predicted: bees
   :srcset: /beginner/images/sphx_glr_transfer_learning_tutorial_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 383-390

Further Learning
-----------------

If you would like to learn more about the applications of transfer learning,
checkout our `Quantized Transfer Learning for Computer Vision Tutorial <https://pytorch.org/tutorials/intermediate/quantized_transfer_learning_tutorial.html>`_.




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  39.030 seconds)


.. _sphx_glr_download_beginner_transfer_learning_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: transfer_learning_tutorial.py <transfer_learning_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: transfer_learning_tutorial.ipynb <transfer_learning_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
